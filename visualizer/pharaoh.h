#ifndef PHARAOH_H
#define PHARAOH_H

#include <QObject>
#include <QThread>
#include "igame.h"
#include "animsequence.h"
#include <map>
#include <string>
#include <list>

// The Codegen's Parser
#include "parser/parser.h"
#include "parser/structures.h"

using namespace std;

namespace visualizer
{
  class Pharaoh: public QThread, public AnimSequence, public IGame
  {
    Q_OBJECT;
    Q_INTERFACES( visualizer::IGame );
    public: 
      struct Rect
      {
        int x;
        int y;
        int right;
        int bottom;
      };

      bool rectsIntersect(float x_1, float y_1, float width_1, float height_1, float x_2, float y_2, float width_2, float height_2);

      Pharaoh();
      ~Pharaoh();

      PluginInfo getPluginInfo();
      void loadGamelog( std::string gamelog );

      void run();
      void setup();
      void destroy();

      void preDraw();
      void postDraw();

      void processInput();
      void pruneSelection();

      void addCurrentBoard();
  
      map<string, int> programs;
      
      list<int> getSelectedUnits();
      
      int getWidth() const { return m_game->states[0].mapWidth; }
      int getHeight() const { return m_game->states[0].mapHeight; }
    private:
      parser::Game *m_game;  // The Game Object from parser/structures.h that is generated by the Codegen
      bool m_suicide;

      list<int> m_SelectedUnits;
      std::list<IGUI::DebugOption> getDebugOptions();
  }; 

} // visualizer

#endif // PHARAOH_H
